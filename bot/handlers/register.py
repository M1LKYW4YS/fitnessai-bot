from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from bot.states.registration import Registration
from bot.db import connect

router = Router()


def back_button(callback_data: str):
    return [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)]

async def is_registered_user(user_id: int) -> bool:
    conn = await connect()
    user = await conn.fetchrow("SELECT * FROM users WHERE id = $1", user_id)
    await conn.close()
    return bool(user and user["age"] and user["fitness_goal"])

@router.message(Command("register"))
async def start_registration(message: types.Message, state: FSMContext):
    conn = await connect()
    existing_user = await conn.fetchrow("SELECT * FROM users WHERE id = $1", message.from_user.id)
    await conn.close()

    if existing_user and existing_user["age"] and existing_user["fitness_goal"]:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Registration.age)

@router.message(Registration.age)
async def process_age(message: types.Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    try:
        age = int(message.text)
        if age < 10 or age > 100:
            raise ValueError
        await state.update_data(age=age)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 100).")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="sex_male")],
        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="sex_female")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="sex_other")],
        back_button("back_age")
    ])
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=keyboard)
    await state.set_state(Registration.sex)

@router.callback_query(F.data == "back_age")
async def go_back_to_age(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass

    await state.set_state(Registration.age)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await callback.answer()

@router.callback_query(F.data.startswith("sex_"))
async def process_sex(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass

    sex = callback.data.split("_")[1]
    await state.update_data(sex=sex)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèãÔ∏è –ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="goal_gain")],
        [InlineKeyboardButton(text="‚öñÔ∏è –ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="goal_lose")],
        [InlineKeyboardButton(text="üîÑ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã", callback_data="goal_maintain")],
        back_button("back_sex")
    ])
    await callback.message.answer("–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?", reply_markup=keyboard)
    await state.set_state(Registration.fitness_goal)
    await callback.answer()

@router.callback_query(F.data == "back_sex")
async def go_back_to_sex(callback: CallbackQuery, state: FSMContext):
    if await is_registered_user(callback.from_user.id):
        await callback.answer("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    try:
        await callback.message.delete()
    except:
        pass

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="sex_male")],
        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="sex_female")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="sex_other")],
        back_button("back_age")
    ])
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=keyboard)
    await state.set_state(Registration.sex)
    await callback.answer()

@router.callback_query(F.data.startswith("goal_"))
async def process_goal(callback: CallbackQuery, state: FSMContext):
    if await is_registered_user(callback.from_user.id):
        await callback.answer("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    try:
        await callback.message.delete()
    except:
        pass

    mapping = {
        "gain": "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã",
        "lose": "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
        "maintain": "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã"
    }
    goal_key = callback.data.split("_")[1]
    await state.update_data(fitness_goal=mapping[goal_key])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        back_button("back_goal")
    ])
    sent_msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º:", reply_markup=keyboard)

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
    await state.update_data(last_bot_message_id=sent_msg.message_id)

    await state.set_state(Registration.height)
    await callback.answer()


@router.callback_query(F.data == "back_goal")
async def go_back_to_goal(callback: CallbackQuery, state: FSMContext):
    if await is_registered_user(callback.from_user.id):
        await callback.answer("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    try:
        await callback.message.delete()
    except:
        pass

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèãÔ∏è –ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="goal_gain")],
        [InlineKeyboardButton(text="‚öñÔ∏è –ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="goal_lose")],
        [InlineKeyboardButton(text="üîÑ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã", callback_data="goal_maintain")],
        back_button("back_sex")
    ])
    await callback.message.answer("–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?", reply_markup=keyboard)
    await state.set_state(Registration.fitness_goal)
    await callback.answer()

@router.message(Registration.height)
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = int(message.text)
        if height < 100 or height > 250:
            raise ValueError
        await state.update_data(height=height)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 100 –¥–æ 250 —Å–º).")
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    old_msg_id = data.get("last_bot_message_id")
    if old_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=old_msg_id)
        except:
            pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        back_button("back_height")
    ])
    sent_msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥:", reply_markup=keyboard)
    await state.update_data(last_bot_message_id=sent_msg.message_id)

    await state.set_state(Registration.weight)

@router.callback_query(F.data == "back_height")
async def go_back_to_height(callback: CallbackQuery, state: FSMContext):
    if await is_registered_user(callback.from_user.id):
        await callback.answer("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º:")
    await state.set_state(Registration.height)
    await callback.answer()

@router.message(Registration.weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight < 30 or weight > 300:
            raise ValueError
        await state.update_data(weight=weight)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 300 –∫–≥).")
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    old_msg_id = data.get("last_bot_message_id")
    if old_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=old_msg_id)
        except:
            pass

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∏–∑–∫–∏–π", callback_data="activity_low")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π", callback_data="activity_medium")],
        [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∏–π", callback_data="activity_high")],
        back_button("back_weight")
    ])
    sent_msg = await message.answer("–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)
    await state.update_data(last_bot_message_id=sent_msg.message_id)

    await state.set_state(Registration.activity_level)

@router.callback_query(F.data == "back_weight")
async def go_back_to_weight(callback: CallbackQuery, state: FSMContext):
    if await is_registered_user(callback.from_user.id):
        await callback.answer("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    try:
        await callback.message.delete()
    except:
        pass

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        back_button("back_height")
    ])
    sent_msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥:", reply_markup=keyboard)

    await state.update_data(last_bot_message_id=sent_msg.message_id)
    await state.set_state(Registration.weight)
    await callback.answer()

@router.callback_query(F.data.startswith("activity_"))
async def process_activity(callback: CallbackQuery, state: FSMContext):
    if await is_registered_user(callback.from_user.id):
        await callback.answer("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    try:
        await callback.message.delete()
    except:
        pass

    activity = callback.data.split("_")[1]
    await state.update_data(activity_level=activity)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–æ–≤–∏—á–æ–∫", callback_data="exp_beginner")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π", callback_data="exp_intermediate")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="exp_advanced")],
        back_button("back_activity")
    ])
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞:", reply_markup=keyboard)
    await state.set_state(Registration.experience_level)
    await callback.answer()

@router.callback_query(F.data == "back_activity")
async def go_back_to_activity(callback: CallbackQuery, state: FSMContext):
    if await is_registered_user(callback.from_user.id):
        await callback.answer("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    try:
        await callback.message.delete()
    except:
        pass

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∏–∑–∫–∏–π", callback_data="activity_low")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π", callback_data="activity_medium")],
        [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∏–π", callback_data="activity_high")],
        back_button("back_weight")
    ])
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)
    await state.set_state(Registration.activity_level)
    await callback.answer()

@router.callback_query(F.data.startswith("exp_"))
async def process_experience(callback: CallbackQuery, state: FSMContext):
    if await is_registered_user(callback.from_user.id):
        await callback.answer("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    try:
        await callback.message.delete()
    except:
        pass

    experience = callback.data.split("_")[1]
    await state.update_data(experience_level=experience)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="disability_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="disability_no")],
        back_button("back_experience")
    ])
    await callback.message.answer("–£ –≤–∞—Å –µ—Å—Ç—å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å?", reply_markup=keyboard)
    await state.set_state(Registration.disability_status)
    await callback.answer()

@router.callback_query(F.data == "back_experience")
async def go_back_to_experience(callback: CallbackQuery, state: FSMContext):
    if await is_registered_user(callback.from_user.id):
        await callback.answer("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    try:
        await callback.message.delete()
    except:
        pass

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–æ–≤–∏—á–æ–∫", callback_data="exp_beginner")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π", callback_data="exp_intermediate")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="exp_advanced")],
        back_button("back_activity")
    ])
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞:", reply_markup=keyboard)
    await state.set_state(Registration.experience_level)
    await callback.answer()

@router.callback_query(F.data.startswith("disability_"))
async def process_disability(callback: CallbackQuery, state: FSMContext):
    if await is_registered_user(callback.from_user.id):
        await callback.answer("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    try:
        await callback.message.delete()
    except:
        pass

    has_disability = callback.data.split("_")[1] == "yes"
    await state.update_data(disability_status=has_disability)

    data = await state.get_data()

    conn = await connect()
    await conn.execute("""
        INSERT INTO users (id, name, age, sex, fitness_goal, height_cm, weight_kg, activity_level, experience_level, disability_status)
        VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
        ON CONFLICT (id) DO UPDATE SET
            name = EXCLUDED.name,
            age = EXCLUDED.age,
            sex = EXCLUDED.sex,
            fitness_goal = EXCLUDED.fitness_goal,
            height_cm = EXCLUDED.height_cm,
            weight_kg = EXCLUDED.weight_kg,
            activity_level = EXCLUDED.activity_level,
            experience_level = EXCLUDED.experience_level,
            disability_status = EXCLUDED.disability_status
    """,
        callback.from_user.id,
        callback.from_user.full_name,
        data["age"],
        data["sex"],
        data["fitness_goal"],
        data["height"],
        data["weight"],
        data["activity_level"],
        data["experience_level"],
        has_disability
    )
    await conn.close()

    await callback.message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    # –£–¥–∞–ª–∏—Ç—å inline-–∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass

    await state.clear()
    await callback.answer()

@router.message(Command("reset"))
async def confirm_reset(message: types.Message):
    conn = await connect()
    user = await conn.fetchrow("SELECT * FROM users WHERE id = $1", message.from_user.id)
    await conn.close()

    if not user or user["age"] is None or user["fitness_goal"] is None:
        await message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=keyboard
    )

@router.message(F.text.in_(["–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞"]))
async def handle_reset_confirm(message: types.Message):
    if message.text == "–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        conn = await connect()
        await conn.execute("DELETE FROM users WHERE id = $1", message.from_user.id)
        await conn.close()
        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /register",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer("‚ùé –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())


