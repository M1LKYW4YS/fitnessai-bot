from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from bot.db import connect
from openai import OpenAI
import os

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


@router.message(Command("start"))
async def start_cmd(message: types.Message):
    conn = await connect()
    user = await conn.fetchrow("SELECT * FROM users WHERE id = $1", message.from_user.id)
    await conn.close()

    if not user:
        await message.answer(
            "üîí –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.\n"
            "–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register"
        )
        return

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user['name']}! üëã\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –ø–∏—Ç–∞–Ω–∏–∏, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, —Å–Ω–µ –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ üí™"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
@router.message(F.text)
async def chat_with_ai(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    user_state = await state.get_state()
    if user_state is not None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –¥—Ä—É–≥–æ–π FSM ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith("/"):
        return

    conn = await connect()
    user = await conn.fetchrow("SELECT * FROM users WHERE id = $1", message.from_user.id)
    await conn.close()

    if not user:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç
    system_prompt = f"""
–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.
–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –ò–º—è: {user['name']}
- –í–æ–∑—Ä–∞—Å—Ç: {user['age']}
- –ü–æ–ª: {user['sex']}
- –¶–µ–ª—å: {user['fitness_goal']}
- –†–æ—Å—Ç: {user['height_cm']} —Å–º
- –í–µ—Å: {user['weight_kg']} –∫–≥
- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['activity_level']}
- –û–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {user['experience_level']}
- –ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {"–µ—Å—Ç—å" if user['disability_status'] else "–Ω–µ—Ç"}

üéØ –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∏–≥–∞—Ç—å –µ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª–µ–π:
- –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é;
- –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è;
- –æ–±—ä—è—Å–Ω—è—Ç—å –ø—Ä–æ—Å—Ç–æ, –∫–∞–∫ –±—É–¥—Ç–æ –æ–±—â–∞–µ—à—å—Å—è —Å –¥—Ä—É–≥–æ–º;
- –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á—Ç–æ-—Ç–æ –≤–Ω–µ —Ñ–∏—Ç–Ω–µ—Å–∞ ‚Äî –º—è–≥–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∫ —Ç–µ–º–µ –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–ø–æ—Ä—Ç–∞.

üó£ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –±–µ–∑ –∑–∞–Ω—É–¥—Å—Ç–≤–∞;
- –æ—Ç–≤–µ—Ç—ã –º–∞–∫—Å–∏–º—É–º 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è;
- –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã;
- –±–µ–∑ ¬´–ø–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º¬ª –∏ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π ChatGPT, –ò–ò –∏–ª–∏ OpenAI.

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ ¬´—á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è¬ª, ¬´–∫–∞–∫ –±—ã—Ç—å¬ª, ¬´—è —É—Å—Ç–∞–ª¬ª ‚Äî
–æ—Ç–≤–µ—Ç—å –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä, –ø–æ–¥–¥–µ—Ä–∂–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–≥.
    """

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message.text},
            ]
        )

        answer = response.choices[0].message.content
        await message.answer(answer)

    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print("–û—à–∏–±–∫–∞ OpenAI:", e)